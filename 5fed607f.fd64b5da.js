(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{160:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(2),a=n(9),i=(n(0),n(200)),o={id:"utils",title:"Utils.jl",sidebar_label:"Utils.jl"},l={id:"api/utils",title:"Utils.jl",description:"convert_coord",source:"@site/docs/api/Utils.md",permalink:"/PopGen.jl/docs/api/utils",editUrl:"https://github.com/pdimens/popgen.jl/edit/documentation/docs/api/Utils.md",lastUpdatedAt:1591241785,sidebar_label:"Utils.jl",sidebar:"docs",previous:{title:"Types.jl",permalink:"/PopGen.jl/docs/api/types"},next:{title:"VariantCall.jl",permalink:"/PopGen.jl/docs/api/variantcall"}},c=[{value:"<code>convert_coord</code>",id:"convert_coord",children:[]},{value:"<code>nonmissing</code>",id:"nonmissing",children:[]},{value:"<code>reciprocal</code>",id:"reciprocal",children:[]},{value:"<code>multitest_missing</code>",id:"multitest_missing",children:[]}],b={rightToc:c};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"convert_coord"},Object(i.b)("inlineCode",{parentName:"h3"},"convert_coord")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-julia"}),"convert_coord(coordinate::string)\n")),Object(i.b)("p",null,"Takes non-decimal-degree format as a ",Object(i.b)("inlineCode",{parentName:"p"},"String")," and returns it as a decimal degree\n",Object(i.b)("inlineCode",{parentName:"p"},"Float32"),". Can be broadcasted over an array of coordinate strings to convert them."),Object(i.b)("h4",{id:"formatting-requirements"},"Formatting requirements"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Coordinates as a ",Object(i.b)("inlineCode",{parentName:"li"},"String")," separated by spaces (",Object(i.b)("inlineCode",{parentName:"li"},'"11 43 41"'),") or colons (",Object(i.b)("inlineCode",{parentName:"li"},'"11:43:41"'),")"),Object(i.b)("li",{parentName:"ul"},"Must use negative sign (",Object(i.b)("inlineCode",{parentName:"li"},'"-11 43.52"'),") or single-letter cardinal direction (",Object(i.b)("inlineCode",{parentName:"li"},'"11 43.52W"'),")"),Object(i.b)("li",{parentName:"ul"},"Missing data should be coded as the string ",Object(i.b)("inlineCode",{parentName:"li"},'"missing"')," (can be accomplished with ",Object(i.b)("inlineCode",{parentName:"li"},"replace!()"),")"),Object(i.b)("li",{parentName:"ul"},"Can mix colons and spaces (although it's bad practice)\n",Object(i.b)("strong",{parentName:"li"},"Example"))),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),'julia> convert_coord("-41 31.52")\n-41.5253f0\njulia> convert_coord.(["-41 31.52", "25 11:54S"])\n2-element Array{Float32,1}:\n-41.5253\n-25.1983\n')),Object(i.b)("h3",{id:"nonmissing"},Object(i.b)("inlineCode",{parentName:"h3"},"nonmissing")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-julia"}),"nonmissing(vec::T) where T<:AbstractArray\n")),Object(i.b)("p",null,"Convenience function to count the number of non-",Object(i.b)("inlineCode",{parentName:"p"},"missing")," values in a vector."),Object(i.b)("h3",{id:"reciprocal"},Object(i.b)("inlineCode",{parentName:"h3"},"reciprocal")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-julia"}),"reciprocal(num::T) where T <: Signed\n")),Object(i.b)("p",null,"Returns the reciprocal (1/number) of a number. Will return ",Object(i.b)("inlineCode",{parentName:"p"},"0")," when\nthe number is ",Object(i.b)("inlineCode",{parentName:"p"},"0")," instead of returning ",Object(i.b)("inlineCode",{parentName:"p"},"Inf"),"."),Object(i.b)("h3",{id:"multitest_missing"},Object(i.b)("inlineCode",{parentName:"h3"},"multitest_missing")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-julia"}),"multitest_missing(pvals::Array{Float64,1}, correction::String)\n")),Object(i.b)("p",null,"Modification to ",Object(i.b)("inlineCode",{parentName:"p"},"MultipleTesting.adjust")," to include ",Object(i.b)("inlineCode",{parentName:"p"},"missing")," values in the\nreturned array. Missing values are first removed from the array, the appropriate\ncorrection made, then missing values are re-added to the array at their original\npositions. See MultipleTesting.jl docs for full more detailed information."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-julia"}),'multitest_missing([0.1, 0.01, 0.005, 0.3], "bh")`\n')),Object(i.b)("h4",{id:"correction-methods-case-insensitive"},Object(i.b)("inlineCode",{parentName:"h4"},"correction")," methods (case insensitive)"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"bonferroni"')," : Bonferroni adjustment"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"holm"')," : Holm adjustment"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"hochberg"')," : Hochberg adjustment"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"bh"')," : Benjamini-Hochberg adjustment"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"by"')," : Benjamini-Yekutieli adjustment"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"bl"')," : Benjamini-Liu adjustment"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"hommel"')," : Hommel adjustment"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"sidak"')," : \u0160id\xe1k adjustment"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"forwardstop"')," or ",Object(i.b)("inlineCode",{parentName:"li"},'"fs"')," : Forward-Stop adjustment"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"bc"')," : Barber-Cande\u0300s adjustment")))}p.isMDXComponent=!0},200:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return u}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var b=a.a.createContext({}),p=function(e){var t=a.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return a.a.createElement(b.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),s=p(n),m=r,u=s["".concat(o,".").concat(m)]||s[m]||d[m]||i;return n?a.a.createElement(u,l(l({ref:t},b),{},{components:n})):a.a.createElement(u,l({ref:t},b))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var b=2;b<i;b++)o[b]=n[b];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);